apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    extraPackagerArgs: ["--sourcemap-output", "$buildDir/generated/sourcemap.js"]
]

apply from: "../../node_modules/react-native/react.gradle"

project.ext.vectoricons = [
    iconFontNames: ['Ionicons.ttf'] // Name of the font files you want to copy
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = System.getenv("separateBuildPerCPUArch") ? System.getenv("separateBuildPerCPUArch").toBoolean() : true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

//Release related properties
def sdkVersion = (System.getenv("devCompatible") && System.getenv("devCompatible").toBoolean()) ? 25 : 30
def abiMultiplier = 100000000
def majorVersion = 2
def minorVersion = 3

def majorMinorVersionOffset = (minorVersion * 10) + (majorVersion * 1000)

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"


    defaultConfig {
        applicationId "com.facilitiesassessment"
        minSdkVersion 16
        targetSdkVersion sdkVersion
        // ABI(1).SupportedSDK(3).VersionName(5). So, ABI=x*100000000. Max Allowed(10): 2100000000.
        versionCode System.getenv("patchVersion") ? System.getenv("patchVersion").toInteger() + majorMinorVersionOffset + (sdkVersion * 100000) : 1
        // ANDROID -> Major(1)Minor(2)Patch(1) - Example 1016 then Major=1, Minor = 1, Patch = 6.
        // IOS -> Version = Major(1).Minor(2).Patch(1) - Example 1.1.6. Build number starts from 1 (which is not part of the version)
        versionName System.getenv("patchVersion") ? (majorMinorVersionOffset + System.getenv("patchVersion").toInteger()).toString() : "1"
        ndk {
            abiFilters "armeabi-v7a", "x86"
            if (enableSeparateBuildPerCPUArchitecture) {
                abiFilters.clear()
            }
        }
        manifestPlaceholders = [
                bugsnagAPIKey: System.getenv("FA_CLIENT_BUGSNAG_API_KEY")?: "dummy"
        ]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK. This does not affect generation of separate apk per cpu architecture. This is an add on apk that is generated for upload to other markets, such as APKFiles, which do not support multiple APKs for a single app.
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        release {
            storeFile file('facilitiesassessment-release-key.keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias "facilitiesassessment-release-key"
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        println('[Gunak] Base version code:' + defaultConfig.versionCode)
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * abiMultiplier + defaultConfig.versionCode
                println('[Gunak] APK version name:' + defaultConfig.versionName)
                println('[Gunak] APK version code:' + output.versionCodeOverride + ' for variant: ' + versionCodes.get(abi))
            } else {
                println('[Gunak] Using universal release variant')
            }
        }
    }
}

dependencies {
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-svg')
    implementation project(':react-native-restart')
    compile project(':bugsnag-react-native')
    compile project(':realm')
    compile project(':react-native-view-shot')
    compile project(':react-native-fs')
    compile project(':react-native-share')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile project(':react-native-vector-icons')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
